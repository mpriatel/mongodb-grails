<h1>MongoDB Grails Plugin</h1>

p. The MongoDB Grails plugin is primarily exposed to Grails applications as a Spring bean called 'mongo'.
   Grails classes can then easily make use of it throughout their code by simply adding a 'mongo'
   property to their classes which support dependency injection (domain/controllers/services), eg:

<pre>
  class UserController{
     def mongo
  }
</pre>

h3. Configuration

p. At startup the MongoDB plugin will look for a 'mongo' configuration property in your
   Config.groovy file which defines your MongoDB databases and related configuration
   properties.

<pre>
  #Config.groovy

  mongo{
     databases{
        server1{
           host = "localhost"
           port = 1234  // if omited, will use the default MongoDB port
        }

        server2{
           host = "192.168.1.2"
        }
     }

     shortcuts{
        users = "server1/app/users"
        comments = "server2/app/comments"
     }
  }
</pre>

p. The above example registers two different database hosts which can then be accessed using the mongo
  bean: <code>mongo.server1.<dbname>.<collection></code>.  'dbname' and 'collection' will
  return the corrisponding Java MongoDB driver equivalents (DB, DBCollection).

h3. Shortcuts

p. Shortcuts can also be defined to shorten the syntax required to access a collection by registering a
  root-level mongo property directly with a collection.  For example, in the above
  example we mapped the 'users' shortcut to "server1/app/users", which lets us use <code>mongo.users</code>
  instead of <code>mongo.server1.app.users</code>.

p. Shortcuts have the added benefit of making it easier to change your server topology without having to
  change your code;  if you were to move your users collection to a different server, you would just update
  your alias.

p. Shortcuts will also be used in the future to reference server-pools.

h3. Mapping Domain Objects

p. The MongoDbWrapper makes it easy to save and restore your Grails domain objects
  to a collection by using mappers which convert your domain objects to BasicDBObjects,
  and vice-versa.

p. To register your Domain class with a mapper you need to add two static helper fields
  to your class:

<pre>
  class User{
    String firstName
    String lastName

    static mongoTypeName = "user"
    static mongoFields = ['fn':firstName','ln':'lastName']
  }
</pre>

p. When your objects are converted to documents a property '_t' is added to help identify the type.
  This type identifier is specified with <code>mongoTypeName</code>.  You then specify which fields
  should be saved, and their respective keys.

p. Domain objects can then be coverted to docs by calling the MOP added method "toMongoDoc()".

<pre>
    def user = new User( firstName:"mark", lastName:"priatel" )
    def userDoc = user.toMongoDoc()
</pre>

p. You can also convert documents retured from queries back into their Domain equivilants
   using the <code>toObject()</code> method added to BasicDBObject and BasicDBList (via MOP):

<pre>
  mongo.users.find().each{ doc ->
     def userDomainObject = doc.toObject()
  }
</pre>

p. The mapper will also process mapped properties and Lists:

<pre>
  class Address{
     String city
     String country

     static mongoTypeName = "address"
     static mongoFields = [ 'ci':'city' , 'co' : 'country' ]
  }

  class User{
    String firstName
    String lastName
    Address address

    static mongoTypeName = "user"
    static mongoFields = ['fn':firstName','ln':'lastName','adrs':'address']
  }

  def adrs = new Address( city:'ottawa' , country:'canada' )
  def user = new User( firstName:'mark', lastName:'priatel',address:adrs)

  mongo.users.save( user.toMongoDoc() )

  (bson)
      { "_id" : ObjectId("4b952284d8e992502c9629e3"), "_t" : "u", "fn" : "mark",
      "ln" : "priatel", "adrs" : { "_t" : "a", "ci" : "ottawa", "co" : "canada" } }
</pre>

p. Of course, you can still save your domain objects using GORM.

<pre>
  def user = new User( firstname:"mark" )
  user.save()
  mongo.users.save( user.toMongoDoc() )
</pre>


h3. MongoDB Document Builder

p. The mongo bean exposes a special root-level property 'doc' which can be used to create
  BasicDBObjectS (which are used by the Java driver to represent MongoDB documents) using a
  Groovy builder syntax:

<pre>
  def userData = mongo.doc{
     firstName("mark")
     lastName("priatel")
     company("iolog")
     address{
        city("ottawa")
        country("canada")
     }
  }

  mongo.user.save(userData)

  println userData._id
</pre>

p. -